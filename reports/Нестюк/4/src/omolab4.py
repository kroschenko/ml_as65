# -*- coding: utf-8 -*-
"""OMOLab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nY6Uv65q9Rz6nAyhgufBZLTOP-LmuG6
"""

import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import numpy as np

data = load_breast_cancer()
X, y = data.data, data.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
y_test = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

class MLP(nn.Module):
    def __init__(self, input_size=30, hidden_size=16):
        super(MLP, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

model_16 = MLP(hidden_size=16)
criterion = nn.BCELoss()
optimizer_16 = optim.Adam(model_16.parameters(), lr=0.001)

epochs = 100
for epoch in range(epochs):
    model_16.train()
    optimizer_16.zero_grad()
    outputs = model_16(X_train)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer_16.step()

def evaluate_model(model, X_test, y_test):
    model.eval()
    with torch.no_grad():
        y_pred = model(X_test)
        y_pred_class = (y_pred > 0.5).float()

        accuracy = accuracy_score(y_test, y_pred_class)
        precision = precision_score(y_test, y_pred_class)
        recall = recall_score(y_test, y_pred_class)
        f1 = f1_score(y_test, y_pred_class)

    return accuracy, precision, recall, f1

acc_16, prec_16, rec_16, f1_16 = evaluate_model(model_16, X_test, y_test)

print("Модель с 16 нейронами:")
print(f"Accuracy: {acc_16:.4f}, Precision: {prec_16:.4f}, Recall: {rec_16:.4f}, F1-score: {f1_16:.4f}")

model_32 = MLP(hidden_size=32)
optimizer_32 = optim.Adam(model_32.parameters(), lr=0.001)

for epoch in range(epochs):
    model_32.train()
    optimizer_32.zero_grad()
    outputs = model_32(X_train)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer_32.step()

acc_32, prec_32, rec_32, f1_32 = evaluate_model(model_32, X_test, y_test)

print("\nМодель с 32 нейронами:")
print(f"Accuracy: {acc_32:.4f}, Precision: {prec_32:.4f}, Recall: {rec_32:.4f}, F1-score: {f1_32:.4f}")

print("\nСравнение метрик:")
print(f"Precision: {prec_16:.4f} -> {prec_32:.4f} (изменение: {prec_32 - prec_16:+.4f})")
print(f"Recall: {rec_16:.4f} -> {rec_32:.4f} (изменение: {rec_32 - rec_16:+.4f})")