# -*- coding: utf-8 -*-
"""OMOLab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M_bHAPbY6gAriAcqgmKVsEQhIGM8G5aO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score

df = pd.read_csv('breast_cancer.csv')
df = df.drop(['id', 'Unnamed: 32'], axis=1, errors='ignore')
df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("ИССЛЕДОВАНИЕ k-NN С РАЗНЫМ K:")

k_values = range(1, 21)
best_accuracy = 0
best_k_accuracy = 1
best_fn = 100
best_k_fn = 1

for k in k_values:
    knn_temp = KNeighborsClassifier(n_neighbors=k)
    knn_temp.fit(X_train_scaled, y_train)
    y_pred = knn_temp.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    fn = cm[1, 0]

    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_k_accuracy = k

    if fn < best_fn:
        best_fn = fn
        best_k_fn = k

print(f"Лучшая точность: k={best_k_accuracy}, точность={best_accuracy:.4f}")
print(f"Меньше всего ложноотрицательных: k={best_k_fn}, FN={best_fn}")

knn = KNeighborsClassifier(n_neighbors=best_k_fn)
dt = DecisionTreeClassifier(random_state=42)
svm = SVC(random_state=42)

knn.fit(X_train_scaled, y_train)
dt.fit(X_train, y_train)
svm.fit(X_train_scaled, y_train)

y_pred_knn = knn.predict(X_test_scaled)
y_pred_dt = dt.predict(X_test)
y_pred_svm = svm.predict(X_test_scaled)

models = {
    f'k-NN (k={best_k_fn})': y_pred_knn,
    'Decision Tree': y_pred_dt,
    'SVM': y_pred_svm
}

print("\nМЕТРИКИ ДЛЯ ЗЛОКАЧЕСТВЕННЫХ ОПУХОЛЕЙ:")

for name, y_pred in models.items():
    cm = confusion_matrix(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    print(f"\n{name}:")
    print(f"Матрица ошибок:\n{cm}")
    print(f"Precision: {precision:.4f}, Recall: {recall:.4f}, F1: {f1:.4f}")
    print(f"Ложноотрицательные: {cm[1,0]}")

print("\nСРАВНЕНИЕ МОДЕЛЕЙ:")

false_negatives = {}
for name, y_pred in models.items():
    cm = confusion_matrix(y_test, y_pred)
    false_negatives[name] = cm[1,0]

for name, fn in sorted(false_negatives.items(), key=lambda x: x[1]):
    print(f"{name}: {fn} ложноотрицательных")

best_model = min(false_negatives.items(), key=lambda x: x[1])
print(f"\nЛУЧШАЯ МОДЕЛЬ: {best_model[0]} ({best_model[1]} FN)")