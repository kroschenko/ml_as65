# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SjYNHitQuI4eHE3zdpAKCzadOFgt8GYo
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
import matplotlib.pyplot as plt
from sklearn import tree as tree1

# 1. Загрузка данных и создание бинарной
data = pd.read_csv("winequality-white.csv", sep=";")
data['good'] = (data['quality'] >= 7).astype(int)
print(data)
x = data.drop(columns=['quality', 'good'])
y = data['good']

# 2. Стандартизация и разделение
scaler = StandardScaler()
x_scaled=scaler.fit_transform(x)
x_scaled = pd.DataFrame(x_scaled, columns=x.columns)
X_train, X_test, y_train, y_test = train_test_split(
    x_scaled, y, test_size=0.2, random_state=42, stratify=y
)

# 3. Обучение и оценка k-NN
k=1
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)
y_knn = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_knn)
precision = precision_score(y_test, y_knn)
recall = recall_score(y_test, y_knn)
print(f"Accuracy: { accuracy: .4f} ")
print(f"Precision: { precision: .4f} ")
print(f"Recall: { recall: .4f} ")
matrix = confusion_matrix(y_test, y_knn)
print(matrix)
disp = ConfusionMatrixDisplay(confusion_matrix=matrix, display_labels=[ 'Обычное' , ' Хорошее' ])
disp.plot(cmap='RdPu' )
plt.title("Матрица ошибок ")
plt.show()
print(f"Ложноположительные: {matrix[0][ 1]} ")
print(f"Ложноотрицательные: {matrix[1][ 0]} ")
print( f1_score(y_test, y_knn))

# 4. Обучение и оценка Decision Tree
tree = DecisionTreeClassifier(random_state=42)
tree.fit(X_train, y_train)
y_tree = tree.predict(X_test)
accuracy = accuracy_score(y_test, y_tree)
precision = precision_score(y_test, y_tree)
recall = recall_score(y_test, y_tree)
print(f"Accuracy: { accuracy: .4f} ")
print(f"Precision: { precision: .4f} ")
print(f"Recall: { recall: .4f} ")
matrix = confusion_matrix(y_test, y_tree)
print(matrix)
disp = ConfusionMatrixDisplay(confusion_matrix=matrix, display_labels=[ 'Обычное' , ' Хорошее' ])
disp.plot(cmap='RdPu' )
plt.title("Матрица ошибок ")
plt.show()
print(f"Ложноположительные: {matrix[0][ 1]} ")
print(f"Ложноотрицательные: {matrix[1][ 0]} ")
print( f1_score(y_test, y_tree))

# 5. Обучение и оценка SVM
svm = SVC()
svm.fit(X_train, y_train)
y_svm = svm.predict(X_test)
accuracy = accuracy_score(y_test, y_svm)
precision = precision_score(y_test, y_svm)
recall = recall_score(y_test, y_svm)
print(f"Accuracy: { accuracy: .4f} ")
print(f"Precision: { precision: .4f} ")
print(f"Recall: { recall: .4f} ")
matrix = confusion_matrix(y_test, y_svm)
print(matrix)
disp = ConfusionMatrixDisplay(confusion_matrix=matrix, display_labels=[ 'Обычное' , ' Хорошее' ])
disp.plot(cmap='RdPu' )
plt.title("Матрица ошибок ")
plt.show()
print(f"Ложноположительные: {matrix[0][ 1]} ")
print(f"Ложноотрицательные: {matrix[1][ 0]} ")
print( f1_score(y_test, y_svm))